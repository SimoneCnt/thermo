
/*
    Thermo header file.

    Copyright (C) 2014-2019 Simone Conti
    Copyright (C) 2015 Universit√© de Strasbourg
*/

#ifndef _THERMO_
#define _THERMO_

/* System-specific variables set at configuration/build time */
#define GIT_VERSION "@GIT_VERSION@"
#define SYSTEM_GEN  "@CMAKE_SYSTEM@"
#define SYSTEM_PROC "@CMAKE_SYSTEM_PROCESSOR@"
#define CC_ID       "@CMAKE_C_COMPILER_ID@"
#define CC_VERSION  "@CMAKE_C_COMPILER_VERSION@"
#define BUILD_DATE  __DATE__ " at " __TIME__

/* Constants */
#define CNS_kB     1.3806488E-23           /* Boltzmann constant [ J/K ]         */
#define CNS_h      6.62606957E-34          /* Planck constant [ Js ]             */
#define CNS_h2     (CNS_h*CNS_h)           /* Planck constant squared [ (Js)^2 ] */
#define CNS_NA     6.02214129E+23          /* Avogadro number []                 */
#define CNS_C      299792458.0             /* Speed of light [ m/s ]             */
#define CNS_cal    4.184                   /* One calorie in joule [ J/cal ]     */
#define CNS_j2kcal (1.0/(CNS_cal*1000.0))  /* Convert joule to kcal [ kcal/J ]   */

/* File pointer for the output */
extern FILE *fpout;

/* Solvent properties */
typedef struct {
    const char *name;       /* Name of the solvent -- just for output */
    double density;         /* Density of the solvent in g/ml -- from experiment */
    double acentricity;     /* Acentric factor -- from experiment */
    double permittivity;    /* Permittivity -- from experiment */
    double expansion;       /* Isobaric thermal expansion coefficient in 1E-3/K -- from experiment */
    double mass;            /* Molecular weight of one solvent molecule in g/mol -- computed */
    double bbox;            /* Surface area of the minimum bounding box for one solvent molecule in A^2 (considering vdw radii) -- computed */
    double vvdw;            /* Van der Waals volume in A^3 -- computed */
    double rgyr;            /* Gyration radius in A -- computed */
} ThermoSolvent;

/* Structure which contain all input informations about a system */
typedef struct {
    int     t;	/* Number of translation degree of freedom */
    int     r;	/* Number of rotational degree of freedom */
    int     v;	/* Number of vibrational degree of freedom */
    int     s;	/* Symmetry number */
    int    nu_np;  /* TODO */
    int     natoms; /* Number of atoms of the molecule */
    char   *hessfile; /* Name of the file containing the hessian matrix */
    double *hessian; /* Hessian matrix */
    double T;   /* Temperature in kelvin */
    double V;   /* Volume */
    double n;   /* Number of mols  */
    double pressure; /* Pressure for a gas in atmosphere */
    double m;	/* Mass of the system in g/mol */
    double E;	/* Energy of the system in kcal/mol */
    double *I;	/* Moments of inertia in g/mol*A^2 */
    double *nu;	/* Vibrational normal modes in cm-1 */
    double dnu; /* Accuracy in vibrational spectra for cumulative and vdos calculations */
    double  q_elec,  q_tr,  q_rot,  q_vibcl,  q_vibqm,  q_totcl,  q_totqm;  /* Natural logarithm of the molecular partition function: ln(q) */
    double  S_elec,  S_tr,  S_rot,  S_vibcl,  S_vibqm,  S_totcl,  S_totqm;  /* Entropy */
    double  U_elec,  U_tr,  U_rot,  U_vibcl,  U_vibqm,  U_totcl,  U_totqm;  /* Internal Energy */
    double  F_elec,  F_tr,  F_rot,  F_vibcl,  F_vibqm,  F_totcl,  F_totqm;  /* Free energy */
    double Sm_elec, Sm_tr, Sm_rot, Sm_vibcl, Sm_vibqm, Sm_totcl, Sm_totqm;  /* Molar Entropy */
    double Um_elec, Um_tr, Um_rot, Um_vibcl, Um_vibqm, Um_totcl, Um_totqm;  /* Molar Internal Energy */
    double Fm_elec, Fm_tr, Fm_rot, Fm_vibcl, Fm_vibqm, Fm_totcl, Fm_totqm;  /* Molar Free energy (chemical potential) */
    double *Fm_vib_cumul_cl, *Fm_vib_cumul_qm, *Fm_vib_cumul_delta;         /* Cumulative vibrational free energy per frequency */
    double *Fm_vib_cumul_cl_k, *Fm_vib_cumul_qm_k, *Fm_vib_cumul_delta_k;   /* Cumulative vibrational free energy per mode */
    double *vdos; /* Vibrational density of states */
    double ZPE; /* Zero-Point vibrational energy */
    double qm_corr; /* Vibrational quantum correction as defined by M. Cecchini, JCTC 2015 */

    /* To compute solvation entropy: */
    ThermoSolvent solvent;      /* Solvent to use */
    double solute_volume;       /* van der Waals volume of one solute molecule [A^3] */
    double rgyr_m;              /* Radius of gyration of the solute */
    double asa_m;               /* accessible surface area of the solute */

    double *results;    /* Vector containing all computed thermodynamic quantities. Indices are in the enum below. */
} Thermo;


enum {
    THERMO_FIRST = 0,
    THERMO_LNQ_TR,
    THERMO_LNQ_ROT,
    THERMO_LNQ_VIBCL,
    THERMO_LNQ_VIBQM,
    THERMO_LNQ_ELEC,
    THERMO_LNQ,
    THERMO_U_TR,
    THERMO_U_ROT,
    THERMO_U_VIBCL,
    THERMO_U_VIBQM,
    THERMO_U_ELEC,
    THERMO_U,
    THERMO_S_TR,
    THERMO_S_ROT,
    THERMO_S_VIBCL,
    THERMO_S_VIBQM,
    THERMO_S_ELEC,
    THERMO_S,
    THERMO_F_TR,
    THERMO_F_ROT,
    THERMO_F_VIBCL,
    THERMO_F_VIBQM,
    THERMO_F_ELEC,
    THERMO_F,
    THERMO_ZPE,
    THERMO_S_SOLV_VNEXCL,
    THERMO_S_SOLV_VFREE,
    THERMO_S_EASYSOLV_TR,
    THERMO_S_EASYSOLV_ROT,
    THERMO_S_EASYSOLV_OMEGA,
    THERMO_S_EASYSOLV_EPSILON,
    THERMO_S_EASYSOLV_ALPHA,
    THERMO_LAST
};


void thermo_calcthermo(Thermo *A);
void thermo_cumulvib(const Thermo *A, const char *filename);
void thermo_delete(Thermo *A);
void thermo_diffthermo(const Thermo *A, const Thermo *B, int nA, int nB, Thermo *D);
void thermo_init(Thermo *A);
void thermo_printconfig(const Thermo *A);
void thermo_printthermo(const Thermo *A, int onlyInt); 
int  thermo_readthermo(Thermo *A, const char *fname);
void thermo_vdos(Thermo *A, const char *fname);
//void thermo_vdosfvib(const Thermo *A, const char *fname);
int thermo_readhessian(Thermo *A);
int thermo_calcfreqs(Thermo *A);
int mtx_dsyev(int n, double *a, double *w, const char *JOBZ, const char *UPLO);

/* Convert units */
double thermo_cm2kelvin(double cm);
double thermo_kelvin2inertia (double kelvin);
double thermo_kelvin2cm(double kelvin);
double thermo_freq2inertia(double freq);

/* Compute thermodynamical quantities */
double *thermo_compute(double temperature, double energy,
    int ntr, double mass, double volume, double nmols,
    int nrot, double *inertia, double symmetry,
    int nvib, double *freq,
    double solute_vdw, double solvent_vdw, double solvent_mass, double solvent_density,
    double solvent_acentricity, double solvent_permittivity, double solvent_expansion,
    double rgyr_m, double rgyr_s, double asa_m, double asa_s);

/* Deals with solvents */
int thermo_get_solvent_from_name(char *name);
ThermoSolvent thermo_get_solvent_from_id(int id);
void thermo_print_solvent_id(FILE *fp, int solventid);
void thermo_print_solvent(FILE *fp, ThermoSolvent);


#endif
